# Stage 1: Build the Node.js Application
FROM node:20-alpine AS build

# Metadata
# Copyright Â© 2024 Max Dietrich <mail@mxd.codes>. All rights reserved.
LABEL org.opencontainers.image.title="docker-staticmaps"
LABEL org.opencontainers.image.description="A containerized web version for staticmaps with Express"
LABEL org.opencontainers.image.url="https://hub.docker.com/repository/docker/mxdcodes/docker-staticmaps"
LABEL org.opencontainers.image.source="https://github.com/dietrichmax/docker-staticmaps"
LABEL org.opencontainers.image.documentation="https://github.com/dietrichmax/docker-staticmaps/blob/main/README.md"
LABEL org.opencontainers.image.authors="Max Dietrich <mail@mxd.codes>"
LABEL org.opencontainers.image.vendor="Max Dietrich <mail@mxd.codes>"
LABEL org.opencontainers.image.licenses=GPL

# Set working directory
WORKDIR /opt/app

# Copy package.json and package-lock.json
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci --production && npm prune --production

# Copy application files
COPY dist ./dist
COPY public ./public

# Stage 2: Final (Nginx + Node.js)
FROM node:20-alpine AS final

# Set working directory
WORKDIR /opt/app

# Copy app from build stage
COPY --from=build /opt/app /opt/app

# Install Nginx
RUN apk add --no-cache nginx

# Copy custom nginx.conf to replace the default
COPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf

# Copy the public directory into the default Nginx static file location
COPY ./public /usr/share/nginx/html

# Add healthcheck to monitor service status
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3000 || exit 1

# Expose port 80
EXPOSE 80 443

# Start Nginx and Node.js
CMD ["sh", "-c", "nginx && npm run start"]